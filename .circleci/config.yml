# .circleci/config.yml
docker-container-config: &docker-container-config
  docker:
    - image: docker:17-git
  environment:
    - USERNAME: nshazly
    - APP_NAME: fortune
    - CACHE_FILE: built-image.tar
  working_directory: /workspace

docker-login: &docker-login
  run:
    name: Login to Docker
    command: docker login -u $DOCKER_USER -p $DOCKER_PASS  

version: 2
jobs:
  build:
    <<: *docker-container-config
    steps:
      - checkout
      - setup_remote_docker
      - run: 
          name: Build Docker Image
          command: |
            export TAG=$(git describe --tags --abbrev=0)
            docker build -t$USERNAME/$APP_NAME:latest -t $USERNAME/$APP_NAME:$TAG .
            mkdir -p docker-cache
            docker save -o docker-cache/$CACHE_FILE $USERNAME/$APP_NAME:$TAG
            docker save -o docker-cache/latest-$CACHE_FILE $USERNAME/$APP_NAME:latest
      - save_cache:
          key: v1-docker-cache-key-{{ .Branch }}-{{ .Revision }}
          paths:
            - docker-cache
  # step is not required, its an example for workflows
  deploy:
    <<: *docker-container-config
    steps:
      - restore_cache:
          keys:
            - v1-docker-cache-key-{{ .Revision }}
      - setup_remote_docker
      - *docker-login
      - run:
          name: Push Docker Image
          command: |
            [[ -e docker-cache/$CACHE_FILE ]] && for i in $(ls docker-cache); do docker load < docker-cache/$i; done || echo "/docker-cache/$CACHE_FILE does not exist"
            docker tag $USERNAME/$APP_NAME $USERNAME/$APP_NAME:latest
            docker images
            # docker push $USERNAME/$APP_NAME

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build:
          filters:
            branches:
              only: circleci-remote-docker-workflow
            tags:
              only: /^v.*/
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: circleci-remote-docker-workflow
            tags:
              only: /^v.*/
        